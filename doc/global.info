This is global.info, produced by makeinfo version 4.0 from global.texi.

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* GLOBAL: (global).             The GNU GLOBAL source code tag system.
END-INFO-DIR-ENTRY

   This file documents the `GLOBAL' source code tag system.

   Copyright (c) 2000, 2001 Tama Communications Corporation. All rights
reserved.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: global.info,  Node: Top,  Next: Introduction,  Up: (dir)

GLOBAL source code tag system
*****************************

   This manual documents version 4.1.1 of the GLOBAL source code tag
system.

* Menu:

* Introduction::                        Overview of the tools.
* Global::                              Command line GLOBAL.
* GloBash::                             Global facility for Bash.
* Nvi editor::                          Extended nvi using GLOBAL.
* Elvis editor::                        Elvis using GLOBAL.
* Vim editor::                          Vim using GLOBAL.
* Emacs editor::                        Extended emacs using GLOBAL.
* Web browser::                         Hypertext generator.
* Other topics::                        Other topics.
* GNU Free Documentation License::	GNU Free Documentation License.
* Index::                               Option index.


File: global.info,  Node: Introduction,  Next: Global,  Prev: Top,  Up: Top

Overview of the tools
*********************

   GNU GLOBAL is a source code tag system that works the same way
across diverse environments.  You can locate a specified function in
the source files and move there easily.  It is useful for hacking a
large project containing many subdirectories, many `#ifdef' and many
`main()' functions.


   GNU GLOBAL has following features:

   * support C, C++, Yacc and Java.

   * work the same way across diverse environments. Currently, support
     followings: 	
          	

        - Shell command line 	

        - Bash shell.  	

        - Vi editor clone (nvi, elvis, vim) 	

        - Less viewer 	

        - Emacs editor (emacs, mule, xemacs) 	

        - Web browser 	

   * find the locations of a specified object quickly.

   * locate not only object definitions but also object references.

   * allows duplicate objects.

   * locate also path which includes specified pattern.

   * can treat a source tree containing subdirectories as a logical
     scope.  You can get the relative path of objects from anywhere
     within      that scope.

   * search not only in a source tree but also in library paths.

   * understand POSIX 1003.2 regular expressions.

   * support external search engine (grep and idutils).

   * generate hypertext of source code.

   * tag files are independent of machine architecture.

   * plugged-in parser is available to treat new language.

   * compact format is available to save disk space.

   * support incremental updating of tag files.

   * support customizing with gtags.conf.

   * generate completion list for completing input method.


File: global.info,  Node: Global,  Next: GloBash,  Prev: Introduction,  Up: Top

Command line GLOBAL
*******************

   You can use tag facilities from shell command line.  It is a big
merit of GLOBAL compared with any other tag system.

* Menu:

* Preparation::                         Preparation.
* Basic usage::                         Basic usage.
* Applied usage::                       Applied usage.


File: global.info,  Node: Preparation,  Next: Basic usage,  Up: Global

Preparation.
============

   First of all, you must execute gtags(1) at the root of source tree.
For example, if you want to browse vi's source code:


         % cd /usr/src/usr.bin/vi
         % gtags

   Gtags traverse subdirectories and makes four databases at the root of
the source tree.


         % ls G*
         GPATH   GRTAGS  GSYMS   GTAGS

   * `GTAGS'         database of function definitions

   * `GRTAGS'         database of function references

   * `GSYMS'         database of other symbols

   * `GPATH'         database of path names


File: global.info,  Node: Basic usage,  Next: Applied usage,  Prev: Preparation,  Up: Global

Basic usage.
============

   Consider the following source tree:


         ROOT/           <- the root of source tree (GTAGS,GRTAGS,...)
         |
         |- DIR1/
         |  |
         |  |- fileA.c   .....   +---------------+
         |  |                    |main(){        |
         |  |                    |       func1();|
         |  |                    |       func2();|
         |  |                    |}              |
         |  |                    +---------------+
         |  |
         |  |- fileB.c   .....   +---------------+
         |                       |func1(){ ... } |
         |                       +---------------+
         |- DIR2/
            |
            |- fileC.c   .....   +---------------+
                                 |#ifdef X       |
                                 |func2(){ i++; }|
                                 |#else          |
                                 |func2(){ i--; }|
                                 |#endif         |
                                 |func3(){       |
                                 |       func1();|
                                 |}              |
                                 +---------------+

   * You can get the relative path of your object from anywhere in the
     source tree. You need not specify where the tag file is.  Global
     will locate the tag file by itself.


              % cd ROOT
              % global func1
              DIR1/fileB.c            # func1() is defined in fileB.c
              % cd DIR1
              % global func1
              fileB.c                 # relative path from DIR1
              % cd ../DIR2
              % global func1
              ../DIR1/fileB.c         # relative path from DIR2

   * The `-r' option locates function references.


              % global -r func2
              ../DIR1/fileA.c         # func2() is referred from fileA.c

   * You can use POSIX regular expressions.


              % cd ROOT
              % global 'func[1-3]'
              DIR1/fileB.c            # func1, func2 and func3 are matched
              DIR2/fileC.c

   * The `-x' option shows the details.  It is similar to the `-x'
     option in ctags(1).


              % global func2
              DIR2/fileC.c
              % global -x func2
              func2              2 DIR2/fileC.c       func2(){ i++; }
              func2              4 DIR2/fileC.c       func2(){ i--; }

   * The `-a' option produces the absolute path name.


              % global -a func1
              /home/user/ROOT/DIR1/fileB.c

   * The -s command locates any symbols other than functions.


              % global -xs X
              X                  1 DIR2/fileC.c #ifdef X

   * The -g command locates any patterns including symbols.  It is
     similar to grep(1).


              % global -xg '#ifdef'
              #ifdef             1 DIR2/fileC.c #ifdef X

   * The -P command enables you to locate path which includes specified
     string.


              % global -P fileB
              DIR1/fileB.c
              % global -P '1/'
              DIR1/fileA.c
              DIR1/fileB.c
              % global -P '\.c$'
              DIR1/fileA.c
              DIR1/fileB.c
              DIR2/fileC.c

   * The -f command enables you see the list of functions of specified
     file.


              % global -f DIR2/fileC.c
              func2              2 DIR2/fileC.c   func2(){ i++; }
              func2              4 DIR2/fileC.c   func2(){ i--; }
              func3              6 DIR2/fileC.c   func3(){



File: global.info,  Node: Applied usage,  Prev: Basic usage,  Up: Global

Applied usage.
==============

   You can make multiple tag files.  For example, you can execute gtags
at ROOT/, version1.0/ and version2.0/.



         ROOT/                   <- the root of source tree      (GTAGS,...)
         |
         |- version1.0/          <- the root of version1.0       (GTAGS,...)
         |  |
         |  |- file.c    .....   +---------------+
         |                       |func1(){ i++; }|
         |                       +---------------+
         |
         |- version2.0/          <- the root of version2.0       (GTAGS,...)
            |
            |- file.c    .....   +---------------+
                                 |func1(){ i--; }|
                                 +---------------+

   * When you are in the version1.0 directory, global will only locate
     functions that are in version1.0.


              % cd ROOT/version1.0
              % global -x func1
              func1              1 file.c          func1(){ i++; }

   * When you are in the version2.0, global will only locate functions
     that are in version2.0.


              % cd ROOT/version2.0
              % global -x func1
              func1              1 file.c          func1(){ i--; }

   * If you are at ROOT/, or you set the `GTAGSROOT' environment
     variable to ROOT, then global will locate functions in both
     directories.


              % cd ROOT
              % global -x func1
              func1              1 version1.0/file.c  func1(){ i++; }
              func1              1 version2.0/file.c  func1(){ i--; }


   There is another usage of `GTAGSROOT'.

   * If your source files are on a read-only device, such as CDROM,
     then you cannot make databases at the root of the source tree.  In
     such cases, please do the following:


              % mkdir /var/dbpath
              % cd /cdrom/src                 # the root of source tree
              % gtags /var/dbpath             # make tag file in /var/dbpath
              % setenv GTAGSROOT `pwd`
              % setenv GTAGSDBPATH /var/dbpath
              % global func

   * If you want all references to a function that is not defined in
     the source tree to be treated as calls to library functions or
     system calls, then you can specify library directories with the
     `GTAGSLIBPATH' environment variable.

     You should execute gtags at each directory of the path.  If
     `GTAGS' is not found in a directory, global ignores that directory.


              % pwd
              /develop/src/mh                         # this is the source tree
              % gtags
              % ls G*TAGS
              GRTAGS  GTAGS
              % global mhl
              uip/mhlsbr.c                            # mhl() is found
              % global strlen                         # strlen() is not found
              % (cd /usr/src/lib; gtags)              # library source
              % (cd /usr/src/sys; gtags)              # kernel source
              % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys
              % global strlen
              ../../../usr/src/lib/libc/string/strlen.c  # found in library
              % global access
              ../../../usr/src/sys/kern/vfs_syscalls.c   # found in kernel

     Of course, the user program does not call kernel functions
     directly, but at least it is useful.

   * If you forget a function name, you can use the -c (complete)
     command.


              % global -c kmem                # maybe k..k.. kmem..
              kmem_alloc
              kmem_alloc_pageable
              kmem_alloc_wait
              kmem_free
              kmem_free_wakeup
              kmem_init
              kmem_malloc
              kmem_suballoc                   # This is what I need!
              % global kmem_suballoc
              ../vm/vm_kern.c

   * You can use the -c command with tcsh's complete command.


              % set funcs=(`global -c`)
              % complete global 'n/*/$funcs/'
              % global kmem_TAB
              kmem_alloc          kmem_free_wakeup
              kmem_alloc_pageable kmem_init
              kmem_alloc_wait     kmem_malloc
              kmem_free           kmem_suballoc
              % global kmem_sTAB
              % global kmem_suballoc
              ../vm/vm_kern.c

   * You can edit all files that include a specified function by typing
     one command, for example:


              % vi `global func1`     # edit fileB.c

   * If you want to browse many files in order, do the following:


              % global -xr fork | awk '{printf "view +%s %s\n",$2,$3}'
              view +650 ../dev/aic7xxx/aic7xxx_asm.c
              view +250 ibcs2/ibcs2_misc.c
              view +401 linux/linux_misc.c
              view +310 ../kern/init_main.c
              view +318 ../kern/init_main.c
              view +336 ../kern/init_main.c
              view +351 ../kern/init_main.c
              % !! | sh            # from now on, go to next tag with 'ZZ'.



File: global.info,  Node: GloBash,  Next: Nvi editor,  Prev: Global,  Up: Top

Global facility for Bash
************************

   Special support for bash is available.

* Menu:

* Features(globash)::			Features.
* Preparation(globash)::		Preparation.
* Basic usage(globash)::		Basic usage.
* Applied usage(globash)::		Applied usage.


File: global.info,  Node: Features(globash),  Next: Preparation(globash),  Up: GloBash

Features.
=========

   * Vi-like tag stack is available.

   * Editor or viewer is automatically invoked.

   * Tag name completion is available.

   * Tag mark facility is available.

   * Yor can manage directory list by cookie facility.


File: global.info,  Node: Preparation(globash),  Next: Basic usage(globash),  Prev: Features(globash),  Up: GloBash

Preparation.
============

   First, do the preparation of global. (Please see *Note
Preparation::.).  And you can invoke bash(1) with --rcfile option.

         % bash --rcfile globash.rc

   You will see a prompt like this:

         [/usr/src/sys]/kern _

   This prompt means that the current directory is '/usr/src/sys/kern'
and the root of the source tree is '/usr/src/sys'.  Tag and marker are
valid only in a project.

   When you get out of the project, globash warns like:

         [/usr/src/sys] cd ..
         You are going to get out of current project.
         Tag stack and marker will be removed. Sure? ([y]/n)_

   If you answer 'y' and `RET' or just `RET' in above example then tag
stack and marker will be removed.

   If you need help then please type 'ghelp'.


File: global.info,  Node: Basic usage(globash),  Next: Applied usage(globash),  Prev: Preparation(globash),  Up: GloBash

Basic usage.
============

   * Almost global(1)'s command character is available as a command.

              [/usr/src/sys] x fork               <- (global -x fork)
              >    1  fork              94 kern/kern_fork.c fork(p, uap)
              [/usr/src/sys] r                    <- (global -xr fork)
              >    1  fork              85 alpha/linux/linux_machdep.c
                   2  fork             184 i386/linux/linux_machdep.c
              [/usr/src/sys] s lbolt              <- (global -xs lbolt)
              >    1  lbolt            1210 i386/isa/wd_cd.c     tsleep((cad
                   2  lbolt            1211 i386/isa/wd_cd.c     tsleep((cad
                   3  lbolt            709 i386/isa/wfd.c     tsleep ((caddr
              ...
              [/usr/src/sys] g                    <- (global -xg lbolt)
              >    1  lbolt            1210 i386/isa/wd_cd.c     tsleep((cad
              ...
              [/usr/src/sys] P init               <- (global -xP init)
              >    1  path    1 dev/hea/eni_init.c
                   2  path    1 dev/hfa/fore_init.c
                   3  path    1 i386/i386/initcpu.c
                   4  path    1 kern/init_main.c
                   5  path    1 kern/init_sysent.c
                   6  path    1 kern/vfs_init.c
                   7  path    1 vm/vm_init.c
              [/usr/src/sys] _

     If no tag name is specified then it is assumed the latest tag name.

   * You can select a tag by show command.

              [/usr/src/sys] x main
              >    1  main              70 alpha/alpha/gensetdefs.c main(in
                   2  main             1500 alpha/alpha/ieee_float.c main(i
                   3  main             227 boot/alpha/boot1/boot1.c main()
              ....
              [/usr/src/sys] show 3
              (Load editor and show boot/alpha/boot1/boot1.c at line 227.)

     The default editor is vi(1) but you can specify it statically by
     `EDITOR' environment variable or temporarily by option.


              [/usr/src/sys] show -e 3
              (Load emacs and show boot/alpha/boot1/boot1.c at line 227.)
              [/usr/src/sys] show -l 3
              (Load less and show boot/alpha/boot1/boot1.c at line 227.)

   * You can use vi-like tag stack. You can return previous tag list by
     pop command.

              [/usr/src/sys] x main
              >    1  main              70 alpha/alpha/gensetdefs.c main(in
                   2  main             1500 alpha/alpha/ieee_float.c main(i
                   3  main             227 boot/alpha/boot1/boot1.c main()
              ....
              [/usr/src/sys] show 3
              (Load editor and show boot/alpha/boot1/boot1.c at line 227.)
              [/usr/src/sys] x fork          <- push new tag on tag stack.
              >    1  fork              94 kern/kern_fork.c fork(p, uap)
              [/usr/src/sys] pop             <- pop tag stack.
              [/usr/src/sys] show
              (Load editor and show boot/alpha/boot1/boot1.c at line 227.)



File: global.info,  Node: Applied usage(globash),  Prev: Basic usage(globash),  Up: GloBash

Applied usage.
==============

   * You can memory tags using 'mark' command.

              [/usr/src/sys] x fork
              >    1  fork              94 kern/kern_fork.c fork(p, uap)
              [/usr/src/sys] mark
              [/usr/src/sys] x main
              >    1  main              70 alpha/alpha/gensetdefs.c main(in
                   2  main             1500 alpha/alpha/ieee_float.c main(i
                   3  main             227 boot/alpha/boot1/boot1.c main()
              ....
              [/usr/src/sys] mark -l              <- show marker list.
                   1  fork              94 kern/kern_fork.c fork(p, uap)
              [/usr/src/sys] mark 1               <- select a marker.
              (Load editor and show kern/kern_fork.c at line 227.)
              [/usr/src/sys] list
              >    1  main              70 alpha/alpha/gensetdefs.c main(in
                   2  main             1500 alpha/alpha/ieee_float.c main(i
                   3  main             227 boot/alpha/boot1/boot1.c main()
              ....

     Marked tags are valid until you get out of current project or quit
     current bash session.

   * You can memory directories using 'cookie' command.

              [/usr/src/sys] cookie               <- drop cookie.
              [/usr/src/sys] cd kern
              [/usr/src/sys]/kern cookie          <- drop cookie again.
              [/usr/src/sys]/kern cd ../i386
              [/usr/src/sys]/i386 cookie -l       <- show cookie list.
                   1  /usr/src/sys/kern
                   2  /usr/src/sys
              [/usr/src/sys]/i386 warp 2          <- warp to selected cookie.
              [/usr/src/sys] _

     Cookie directories are valid until you delete them.



File: global.info,  Node: Nvi editor,  Next: Elvis editor,  Prev: GloBash,  Up: Top

Extended nvi using global
*************************

   You can use GLOBAL as a tag system of Nvi editor instead of ctags.

* Menu:

* Features(nvi)::			Features.
* Preparation(nvi)::                    Preparation.
* Basic usage(nvi)::                    Basic usage.
* Applied usage(nvi)::                  Applied usage.


File: global.info,  Node: Features(nvi),  Next: Preparation(nvi),  Up: Nvi editor

Features.
=========

   * You can use most of GLOBAL's facilities from the editor.

   * Recognition of the current token and its type.

   * Extended nvi is completely backward-compatible with the original
     nvi.  You can use GLOBAL's facilities only in 'gtags mode'.


File: global.info,  Node: Preparation(nvi),  Next: Basic usage(nvi),  Prev: Features(nvi),  Up: Nvi editor

Preparation.
============

   First, do the preparation of global. (Please see *Note
Preparation::.).

   Second, to use global from vi, you need to get into "gtagsmode".
There are several ways to do this:

  1. Start vi with `-G' option


              % vi -G file.c

  2. Start vi and execute `set gtagsmode'.


              % vi file.c
              ~
              ~
              ~
              :set gtagsmode

  3. Write the above set command to the `.exrc' or `.nexrc' and start vi


              $HOME/.exrc
              +----------------------------
              |set gtagsmode

     You must start vi under the source tree described in *Note
     Preparation::.


File: global.info,  Node: Basic usage(nvi),  Next: Applied usage(nvi),  Prev: Preparation(nvi),  Up: Nvi editor

Basic usage.
============

   * To go to func1, you can say

              :tag func1

     It seemes the same as original vi, but extended vi use `GTAGS'
     instead of `tags'.

   * To go to the referenced point of func1, add the option `-r'

              :tag -r func1

     Extended nvi use `GRTAGS'.

   * If a number of functions are located, extended vi goes to the
     first tag.  You can go to next tag by typing `:tagnext' and back
     by typing `:tagprev'.


              Suggested .nexrc:
              set gtagsmode
              map ^N :tagnext^M
              map ^P :tagprev^M

   * `CTL-]' command is available.  In gtags mode, if current token is
     not a function then it is equivalent to `:tag -s CURRENT TOKEN'.
     Otherwise, if you are in the first column of a line, it is
     equivalent to `:tag -r CURRENT TOKEN' else it is equivalent to
     `:tag CURRENT TOKEN'.

   * You can use the `-s' option. It locates any symbols other than
     functions.

              :tag -s pat
     Extended nvi use `GSYMS'.

   * The `-g', `-f' and `-P' option are also available.  It works like
     command line. Extended nvi use no index file.

              :tag -g pat

   * Other tag commands are also available:
    `CTL-T'
          Return to the most recent tag context.

    `:tagpop'
          Go to the specified tag in the tags stack.

    `:tagtop'
          Go to the top tag in the tags stack.

    `:display tags'
          Display the tags stack.


File: global.info,  Node: Applied usage(nvi),  Prev: Basic usage(nvi),  Up: Nvi editor

Applied usage.
==============

   * In large projects that include many main() function like MH, you
     can start vi like this:

              % vi -G -t main
     You can browse all commands sequentially.

   * When you want to check functions the name of which start with
     "set" or "get", use:

              % vi -G -t '^[sg]et'

     Of course, the following command is also available:

              :tag ^[sg]et

   * If your source files are on a read only device like a CD-ROM,
     please do the following:

              % mkdir /var/dbpath             # directory for the tag file
              % cd /cdrom/src                 # the root of the source tree
              % gtags /var/dbpath             # make tag files in /var/dbpath
              % setenv GTAGSROOT `pwd`
              % setenv GTAGSDBPATH /var/dbpath
              % vi -G -t main

   * If you want all references to function that are not defined in the
     source         tree to be treated as references to library
     functions or as system calls,         do the following:

              % cd /usr/src/lib
              % gtags                         # probably as a root
              % cd /usr/src/sys
              % gtags
              % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys

   * If you examine vi's source,

              % cd /usr/src/usr.bin/vi
              % gtags
              % vi -G -t main

     You can start from vi and browse the whole unix world as if you
     were using hypertext.


File: global.info,  Node: Elvis editor,  Next: Vim editor,  Prev: Nvi editor,  Up: Top

Elvis using global
******************

   Elvis 2.1 has new `tagprg' and `tagprgonce' variables for running an
external tag search program. You can use them with GLOBAL.

* Menu:

* Features(elvis)::                     Features.
* Preparation(elvis)::                  Preparation.
* Basic usage(elvis)::                  Basic usage.
* Applied usage(elvis)::                Applied usage.


File: global.info,  Node: Features(elvis),  Next: Preparation(elvis),  Up: Elvis editor

Features.
=========

   * You can use most of GLOBAL's facilities from the editor.

   * No source level patch is needed.

   * Mouse events are supported.


File: global.info,  Node: Preparation(elvis),  Next: Basic usage(elvis),  Prev: Features(elvis),  Up: Elvis editor

Preparation.
============

   First, do the preparation of global. (Please see *Note
Preparation::.).

   Second, start elvis and execute `set tagprg="global -t $1"' like
this.


         % elvis
         ~
         ~
         ~
         ~
         ~
         ~
         :set tagprg="global -t $1"


File: global.info,  Node: Basic usage(elvis),  Next: Applied usage(elvis),  Prev: Preparation(elvis),  Up: Elvis editor

Basic usage.
============

   * To go to func1, you can say

              :tag func1

     It seemes the same as original elvis, but elvis execute `global -t
     func1' internally and read it instead of tags file.

   * To go to the referenced point of func1, add `-r' option.

              :tag -r func1

     Elvis executes command like `global -t -r func1' internally.

   * To go to any symbols other than function, try this.

              :tag -s lbolt

   * To go to any strings other than symbols, try this.

              :tag -g Copyright

   * When using -r, -s or -g, you had better to use browse command.

              :browse -r fork

     It brings a following selection list. You can select tag and go to
     the point.


              Browse -r fork (2 matches)
              +----------------+----------------+--------------------
              | TAG NAME       | SOURCE FILE    | SOURCE LINE
              +----------------+----------------+--------------------
              |fork            |ux/linux_misc.c | (line 565)
              |fork            |ern/init_main.c | (line 191)
              +----------------+----------------+--------------------

   * To get list of functions in a file, use -f command.

              :browse -f main.c               <- locate functions in main.c

   * Other tag commands are also available:

    `CTL-]'
          go to the definition of current token.

    `CTL-T'
          return to the most recent tag context.

    `:tag'
          without argument, go to the next tag.

    `:pop'
          return to the most recent tag context.

    `:stack'
          display the tags stack.

    `:stag'
          creates a new window and moves its cursor to the tag's
          definition point.

    `:sbrowse'
          same with 'browse' but show in a new window.


File: global.info,  Node: Applied usage(elvis),  Prev: Basic usage(elvis),  Up: Elvis editor

Applied usage.
==============

   * You can use POSIX regular expressions.

              :tag ^put_                  <- locate functions start with 'put_'
          
              :browse -g 'fseek(.*L_SET)' <- locate fseek() using L_SET argument

   * You can browse functions list of many files.

              :browse -f *.c              <- locate functions in *.c

   * You can browse project files whose path includs specified pattern.

              :browse -P /vm/             <- under vm/ directory
              :browse -P \.h$             <- all include files
              :browse -P init             <- path including 'init'

   * You can use mouse to select tag.

              +----------------+----------------+--------------------
              | TAG NAME       | SOURCE FILE    | SOURCE LINE
              +----------------+----------------+--------------------
              |fork            |ux/linux_misc.c | (line 565)
              |fork            |ern/init_main.c | (line 191)
              +----------------+----------------+--------------------

     Please select tag name with mouse cursor and double click on the
     left button and you go to the tag's point.  In source screen, also
     select function name and double click on the left button and you
     can go to the point that the function is defined.  To come back,
     double click on the right button.


File: global.info,  Node: Vim editor,  Next: Emacs editor,  Prev: Elvis editor,  Up: Top

Vim using global
****************

   Vim 5.2 or later has `grepprg' and `grepformat' variables for
running an external grep like search program. You can use them with
GLOBAL.

* Menu:

* Features(vim)::                       Features.
* Preparation(vim)::                    Preparation.
* Basic usage(vim)::                    Basic usage.
* Applied usage(vim)::                  Applied usage.


File: global.info,  Node: Features(vim),  Next: Preparation(vim),  Up: Vim editor

Features.
=========

   * You can use most of GLOBAL's facilities from the editor.

   * No source level patch is needed.

   * (But tag stack cannot be available.)


File: global.info,  Node: Preparation(vim),  Next: Basic usage(vim),  Prev: Features(vim),  Up: Vim editor

Preparation.
============

   First, do the preparation of global. (Please see *Note
Preparation::.).

   Second, write the following set command to the `.vimrc' and start
vim.


         $HOME/.vimrc
         +----------------------------
         |set grepprg=global\ -t
         |set grepformat=%m\TAB%f\TAB%l
     
         TAB means CTL-I


File: global.info,  Node: Basic usage(vim),  Next: Applied usage(vim),  Prev: Preparation(vim),  Up: Vim editor

Basic usage.
============

   * To go to func1, you can say

              :grep func1

     Vim execute `global -t func1', parse the output and list located
     objects. You can go to the first entry with `RET'.

   * To go to the referenced point of func1, add `-r' option.

              :grep -r func1

     vim executes command like `global -t -r func1' internally.

   * To go to any symbols other than function, try this.

              :grep -s lbolt

   * To go to any strings other than symbols, try this.

              :grep -g Copyright

     If many objects are located, vim list all of the them.


          main    /usr/src/sys/i386/linux/linux_genassym.c        14
          main    /usr/src/sys/kern/init_main.c   183
          main    /usr/src/sys/pc98/boot/netboot/main.c   37
          main    /usr/src/sys/pc98/boot/netboot/makerom.c        14
          
          Hit ENTER or type command to continue

     You can go to any entry with `cc'n command.

   * To get list of functions in a file, use -f command.

              :grep -f main.c               <- locate functions in main.c

   * Other grep related commands are also available:

    `:cn'
          go to the next entry.

    `:cp'
          go to the previous entry.

    `:ccN'
          go to the N'th entry.

    `:cl'
          list all entries.


File: global.info,  Node: Applied usage(vim),  Prev: Basic usage(vim),  Up: Vim editor

Applied usage.
==============

   * You can use POSIX regular expressions.

              :grep ^put_                  <- locate functions start with 'put_'
          
              :grep -g 'fseek(.*L_SET)' <- locate fseek() using L_SET argument

   * You can browse functions list of many files.

              :grep -f *.c              <- locate functions in *.c

   * You can browse project files whose path includs specified pattern.

              :grep -P /vm/             <- under vm/ directory
              :grep -P \.h$             <- all include files
              :grep -P init             <- path including 'init'



File: global.info,  Node: Emacs editor,  Next: Web browser,  Prev: Vim editor,  Up: Top

Extended emacs using global
***************************

   You can use GLOBAL as a tag system of Emacs editor instead of etags.

* Menu:

* Features(emacs)::			Features.
* Preparation(emacs)::                  Preparation.
* Basic usage(emacs)::                  Basic usage.
* Applied usage(emacs)::                Applied usage.


File: global.info,  Node: Features(emacs),  Next: Preparation(emacs),  Up: Emacs editor

Features.
=========

   * You can use most of GLOBAL's facilities from the editor.

   * More intelligent recognition of the current token and its type.

   * Tag completion is available for input tag name.

   * Mouse events are supported.


File: global.info,  Node: Preparation(emacs),  Next: Basic usage(emacs),  Prev: Features(emacs),  Up: Emacs editor

Preparation.
============

   First, do the preparation of global. (Please see *Note
Preparation::.).

   Second, to use global from emacs, you need to load the `gtags.el'
and execute gtags-mode function in it.

  1. Write the autoload function to the `$HOME/.emacs', start emacs
       and execute the gtags-mode function.


              $HOME/.emacs
              +------------------------------------------------------
              |(autoload 'gtags-mode "gtags" "" t)
          
              % emacs
          
              |
              |J_:-----Mule: *scratch*       (Lisp Interaction)--L16--All----
              |M-x gtags-mode[RET]
              +------------------------------------------------------

     If you want to get into gtags-mode on c-mode then you can append
     followings into the `$HOME/.emacs'.

                (setq c-mode-hook
                    '(lambda ()
                        (gtags-mode 1)
                ))

  2. Specify the root directory of the source tree using
     `gtags-visit-rootdir'.  If you have tag files in /usr/src/sys then
     please do like this:

              Visit root directory: /usr/src/sys


File: global.info,  Node: Basic usage(emacs),  Next: Applied usage(emacs),  Prev: Preparation(emacs),  Up: Emacs editor

Basic usage.
============

   * To go to func1, invoke `gtags-find-tag' and you can see a prompt
     in mini-buffer. Then input the tag name.

              Find tag: func1			<- 'Find tag: ' is a prompt

   * To go to a point that references func1, invoke `gtags-find-rtag'.


              Find tag (reference): func1

   * Tag name completion is available.       You need to execute
     `gtags-make-complete-list' command before it.

              Find tag: fuTAB
          
              Find tag: func1                     <- 'nc1' is appended by emacs

   * If a number of functions are located, emacs goes into "GTAGS
     SELECT MODE"      like this:

              +-------------------------------------------------------------
              |main             347 i386/isa/ultra14f.c main()
              |main             128 kern/init_main.c   main(framep)
              |main             104 netiso/clnp_debug.c main()
              |main             164 netiso/xebec/main.c main(argc, argv)
              |
              |
              |
              |
              |
              |J_:--%*-Mule: *scratch*       (Gtags Select)--L1--All----
              |[GTAGS SELECT MODE] 4 lines
              +-------------------------------------------------------------

     You can select a tag line by using any emacs command and pressing
     `RET', and you can go to the tag's point. When you want to go to
     the next or the previous tag, you can return to 'GTAGS SELECT
     MODE' with `gtags-pop-stack' and reselect.

   * `gtags-find-tag-from-here' command is available.

     If current token is a definition, it is equivalent to `Find tag
     (reference): CURRENT TOKENRET', otherwise it is equivalent to
     `Find tag: CURRENT TOKENRET'.  (GLOBAL decides this
     intelligentlly, but may sometimes misunderstand.)

   * To go to any symbols other than function, try `gtags-find-symbol'.

              Find symbol: lbolt		<- 'Find symbol:' is a prompt

   * To go to any strings other than symbols, try
     `gtags-find-with-grep'.

              Find pattern: Copyright


File: global.info,  Node: Applied usage(emacs),  Prev: Basic usage(emacs),  Up: Emacs editor

Applied usage.
==============

   * You can use POSIX regular expressions.


              Find tag: ^put_                 <- locate tags start with 'put_'

   * If your source files are on a read-only device like a CDROM,
     please do      the following:

              % mkdir /var/dbpath             # directory for the tag file
              % cd /cdrom/src                 # the root of the source tree
              % gtags /var/dbpath             # make tag files in /var/dbpath
              % setenv GTAGSROOT `pwd`
              % setenv GTAGSDBPATH /var/dbpath
              % emacs -f gtags-mode

   * If you want all references to functions that are not defined in the
         source tree to be treated as references to library functions
     or      as system calls, do the following:


              % cd /usr/src/lib
              % gtags                         <- probably as a root
              % cd /usr/src/sys
              % gtags
              % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys
              % emacs -f gtags-mode

   * Mouse command is avalable.

     If you use X version emacs, try the following

     Move the mouse cursor to a function name and click the middle
     button.  You will then go to the function's definition, or to its
     references, depending on the context. In 'GTAGS SELECT MODE', move
     the mouse cursor to a line and click the center button.

     To return to the previous position, click the right button.


File: global.info,  Node: Web browser,  Next: Other topics,  Prev: Emacs editor,  Up: Top

Hypertext generator
*******************

   You can use GLOBAL's facilities from WWW browser.

* Menu:

* Features(browser)::                   Features.
* Preparation(browser)::                Preparation.
* Usage(browser)::                      Usage.


File: global.info,  Node: Features(browser),  Next: Preparation(browser),  Up: Web browser

Features.
=========

   * Htags makes hypertext from C, C++, Yacc and Java source files.

   * Once the hypertext is generated, you need nothing other than a WWW
     browser.

   * You can move the hypertext to anywhere. It is independent of the
     source code.

   * You can use all of your browser's functions, such as search,
     history, bookmark, save, frames, windows.


File: global.info,  Node: Preparation(browser),  Next: Usage(browser),  Prev: Features(browser),  Up: Web browser

Preparation.
============

   At first, you must ensure that you have a lot of disk space.
Hypertext needs a great amount of disk space. For example, the source
code of FreeBSD kernel needs:


         source code(/usr/src/sys)       14.0MB
     
         GTAGS                            1.5MB
         GRTAGS                           8.0MB
         GSYMS                           12.0MB
         HTML/                           55MB(!!!)
         -------------------------------------------------
         total                           77MB

   Please do the following:


         (at your source directory)
         % gtags                 # make the tag database(GTAGS,GRTAGS,GSYMS)
         % htags                 # make the hypertext(HTML/)

   Then you will find an `HTML' subdirectory in the current directory.


File: global.info,  Node: Usage(browser),  Prev: Preparation(browser),  Up: Web browser

Usage.
======

   Please start a web browser like this:


         % lynx HTML/index.html

   You will understand the usage by looking at the examples.

   You can move the HTML directory to anywhere. It is independent of the
source code.


File: global.info,  Node: Other topics,  Next: GNU Free Documentation License,  Prev: Web browser,  Up: Top

Other topics
************

* Menu:

* Plugin::                              How to plug in a parser.
* Compact format::                      Compact format.
* Incremental updating::                Incremental updating.


File: global.info,  Node: Plugin,  Next: Compact format,  Up: Other topics

How to plug in a parser.
========================

   You can write new parser and use as a plugged-in parser.

   Copy `gtags.conf' to `/etc/gtags.conf' or `$HOME/.globalrc'.

   For example, if you would like to use ctags based on etags (included
by Emacs),


         % cd /EMACS SOURCE DIRECTORY/lib-src
         % make ctags
         # cp ctags /usr/local/bin/ctags-emacs
         % setenv GTAGSLABEL ctags-emacs         # see gtags.conf
         % gtags
         % ls G*
         GPATH   GTAGS

   Or if you would like to use exuberant ctags (included by Vim editor),


         % cd /VIM SOURCE DIRECTORY/src/ctags
         % cp Makefile.unix Makefile
         % make
         # cp ctags /usr/local/bin/ctags-exuberant
         % setenv GTAGSLABEL ctags-exuberant     # see gtags.conf
         % gtags
         % ls G*
         GPATH   GTAGS

   `GRTAGS' and `GSYMS' don't exist, simply because these parsers don't
support the `-r' option and `-s' option like gctags(1) does.  All
plugged-in parsers must print tag information to standard output in the
same style as `ctags -x', ie.:


         [1]    [2] [3]          [4]
         ----------------------------------------------------------------
         main    20 ./main.c     main(argc, argv)        /* xxx */
     
         [1] tag name
         [2] line number the tag appeared
         [3] path name. It must be equal to argument path name.
         [4] line image

   Otherwise, you can make a suitable wrapper for the plug-in parser.


File: global.info,  Node: Compact format,  Next: Incremental updating,  Prev: Plugin,  Up: Other topics

Compact format.
===============

   You can save disk space with the compact format. The compact format
needs source files.

   * To specify the use of the compact format on the command line,
     add the `-c' option:

              % gtags -c

   * To specify the use of the compact format in the configuration file:

              +----------------------------
              |...
              |default:\
              |       format=compact:...

   * If you will publish hypertext generated by htags then use the `-c'
     option      of htags too:

              % htags -c

     With the `-c' option, htags makes gzipped hypertext.  You need to
     set up an HTTP server so that gzipped files can be read (see
     `HTML/.htaccess.skel').


              Example:
          
                      Standard        Compact         Compressed rate
              -------------------------------------------------------
              GTAGS    1744896 bytes   720896 bytes   -59%
              GRTAGS  10133504 bytes  1409024 bytes   -86%
              GSYMS   11911168 bytes  9306112 bytes   -22%
          
                      Standard        Compact         Compressed rate
              -------------------------------------------------------
              HTML/   56618 kbytes    15219 kbytes    -73%


File: global.info,  Node: Incremental updating,  Prev: Compact format,  Up: Other topics

Incremental updating.
=====================

   Modifying some source files, you need not remake whole tag files.
Instead, you can use incremental updating facility (`-u' option).

         % gtags
         % cd kern
         % vi tty.c                              # modify tty.c
         ...
         :wq
         % global -vu                            # -v means verbose
         [Sun Dec  6 16:27:47 JST 1998] Gtags started
          Tag found in '/usr/src/sys'.
          Incremental update.
          Updating tags of 'kern/tty.c' ...GTAGS..GRTAGS..GSYMS.. Done.
          Global databases have been modified.
         [Sun Dec  6 16:28:30 JST 1998] Done.
         % global -vu                            # try again
         [Sun Dec  6 16:28:48 JST 1998] Gtags started
          Tag found in '/usr/src/sys'.
          Incremental update.
          Global databases are up to date.       # do nothing
         [Sun Dec  6 16:28:52 JST 1998] Done.


File: global.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Other topics,  Up: Top

GNU Free Documentation License
******************************

                        Version 1.1, March 2000

     Copyright (C) 2000  Free Software Foundation, Inc.
         59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get credit
for their work, while not being considered responsible for
modifications made by others.

   This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft license
designed for free software.

   We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals; it
can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

APPLICABILITY AND DEFINITIONS
=============================

   This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

   A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

   A "Secondary Section" is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding them.

   The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

   The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

   A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the general
public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input to
text formatters.  A copy made in an otherwise Transparent file format
whose markup has been designed to thwart or discourage subsequent
modification by readers is not Transparent.  A copy that is not
"Transparent" is called "Opaque".

   Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML or
XML using a publicly available DTD, and standard-conforming simple HTML
designed for human modification.  Opaque formats include PostScript,
PDF, proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated
HTML produced by some word processors for output purposes only.

   The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

VERBATIM COPYING
================

   You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

   You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

COPYING IN QUANTITY
===================

   If you publish printed copies of the Document numbering more than
100, and the Document's license notice requires Cover Texts, you must
enclose the copies in covers that carry, clearly and legibly, all these
Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts
on the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present the
full title with all words of the title equally prominent and visible.
You may add other material on the covers in addition.  Copying with
changes limited to the covers, as long as they preserve the title of
the Document and satisfy these conditions, can be treated as verbatim
copying in other respects.

   If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

   If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

   It is requested, but not required, that you contact the authors of
the Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.

MODIFICATIONS
=============

   You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release the
Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy of
it.  In addition, you must do these things in the Modified Version:

  A. Use in the Title Page (and on the covers, if any) a title distinct
     from that of the Document, and from those of previous versions
     (which should, if there were any, be listed in the History section
     of the Document).  You may use the same title as a previous version
     if the original publisher of that version gives permission.

  B.  List on the Title Page, as authors, one or more persons or
     entities responsible for authorship of the modifications in the
     Modified Version, together with at least five of the principal
     authors of the Document (all of its principal authors, if it has
     less than five).

  C. State on the Title page the name of the publisher of the Modified
     Version, as the publisher.

  D.  Preserve all the copyright notices of the Document.

  E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.

  F. Include, immediately after the copyright notices, a license notice
     giving the public permission to use the Modified Version under the
     terms of this License, in the form shown in the Addendum below.

  G. Preserve in that license notice the full lists of Invariant
     Sections and required Cover Texts given in the Document's license
     notice.

  H. Include an unaltered copy of this License.

  I. Preserve the section entitled "History", and its title, and add to
     it an item stating at least the title, year, new authors, and
     publisher of the Modified Version as given on the Title Page.  If
     there is no section entitled "History" in the Document, create one
     stating the title, year, authors, and publisher of the Document as
     given on its Title Page, then add an item describing the Modified
     Version as stated in the previous sentence.

  J. Preserve the network location, if any, given in the Document for
     public access to a Transparent copy of the Document, and likewise
     the network locations given in the Document for previous versions
     it was based on.  These may be placed in the "History" section.
     You may omit a network location for a work that was published at
     least four years before the Document itself, or if the original
     publisher of the version it refers to gives permission.

  K. In any section entitled "Acknowledgements" or "Dedications",
     preserve the section's title, and preserve in the section all the
     substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.

  L. Preserve all the Invariant Sections of the Document, unaltered in
     their text and in their titles.  Section numbers or the equivalent
     are not considered part of the section titles.

  M. Delete any section entitled "Endorsements".  Such a section may
     not be included in the Modified Version.

  N. Do not retitle any existing section as "Endorsements" or to
     conflict in title with any Invariant Section.

   If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

   You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties-for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

   You may add a passage of up to five words as a Front-Cover Text, and
a passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or through
arrangements made by) any one entity.  If the Document already includes
a cover text for the same cover, previously added by you or by
arrangement made by the same entity you are acting on behalf of, you
may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

   The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

COMBINING DOCUMENTS
===================

   You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

   The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of Invariant
Sections in the license notice of the combined work.

   In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."

COLLECTIONS OF DOCUMENTS
========================

   You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy that
is included in the collection, provided that you follow the rules of
this License for verbatim copying of each of the documents in all other
respects.

   You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.

AGGREGATION WITH INDEPENDENT WORKS
==================================

   A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version of
the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they are
not themselves derivative works of the Document.

   If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.  Otherwise
they must appear on covers around the whole aggregate.

TRANSLATION
===========

   Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the original
English version of this License.  In case of a disagreement between the
translation and the original English version of this License, the
original English version will prevail.

TERMINATION
===========

   You may not copy, modify, sublicense, or distribute the Document
except as expressly provided for under this License.  Any other attempt
to copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such parties
remain in full compliance.

FUTURE REVISIONS OF THIS LICENSE
================================

   The Free Software Foundation may publish new, revised versions of
the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

   Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.

ADDENDUM: How to use this License for your documents
====================================================

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

     Copyright (c)  YEAR  YOUR NAME.
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1
     or any later version published by the Free Software Foundation;
     with the Invariant Sections being LIST THEIR TITLES, with the
     Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
     A copy of the license is included in the section entitled "GNU
     Free Documentation License".

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: global.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Option Index
************

* Menu:

* -a:                                    Basic usage.
* -c <1>:                                Compact format.
* -c:                                    Applied usage.
* -f <1>:                                Basic usage(elvis).
* -f <2>:                                Basic usage.
* -f <3>:                                Applied usage(vim).
* -f <4>:                                Basic usage(vim).
* -f:                                    Applied usage(elvis).
* -g <1>:                                Basic usage(vim).
* -g <2>:                                Basic usage.
* -g <3>:                                Basic usage(elvis).
* -g <4>:                                Applied usage(vim).
* -g:                                    Applied usage(elvis).
* -P <1>:                                Applied usage(vim).
* -P <2>:                                Basic usage.
* -P:                                    Applied usage(elvis).
* -r <1>:                                Basic usage.
* -r <2>:                                Plugin.
* -r <3>:                                Basic usage(vim).
* -r:                                    Basic usage(elvis).
* -s <1>:                                Basic usage.
* -s <2>:                                Plugin.
* -s <3>:                                Basic usage(elvis).
* -s:                                    Basic usage(vim).
* -t <1>:                                Preparation(elvis).
* -t:                                    Preparation(vim).
* -u:                                    Incremental updating.
* -x:                                    Basic usage.



Tag Table:
Node: Top743
Node: Introduction1638
Node: Global3356
Node: Preparation3772
Node: Basic usage4403
Node: Applied usage8064
Node: GloBash13137
Node: Features(globash)13477
Node: Preparation(globash)13809
Node: Basic usage(globash)14712
Node: Applied usage(globash)17904
Node: Nvi editor19757
Node: Features(nvi)20169
Node: Preparation(nvi)20527
Node: Basic usage(nvi)21316
Node: Applied usage(nvi)22915
Node: Elvis editor24511
Node: Features(elvis)24993
Node: Preparation(elvis)25241
Node: Basic usage(elvis)25658
Node: Applied usage(elvis)27610
Node: Vim editor29101
Node: Features(vim)29591
Node: Preparation(vim)29842
Node: Basic usage(vim)30297
Node: Applied usage(vim)31749
Node: Emacs editor32470
Node: Features(emacs)32894
Node: Preparation(emacs)33227
Node: Basic usage(emacs)34506
Node: Applied usage(emacs)36726
Node: Web browser38302
Node: Features(browser)38650
Node: Preparation(browser)39124
Node: Usage(browser)40066
Node: Other topics40397
Node: Plugin40728
Node: Compact format42307
Node: Incremental updating43723
Node: GNU Free Documentation License44771
Node: Index63500

End Tag Table
