This is global.info, produced by makeinfo version 4.2 from global.texi.

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* GLOBAL: (global).             GNU GLOBAL source code tag system.
END-INFO-DIR-ENTRY

   This file documents the GNU GLOBAL source code tag system.

   Copyright (c) 2000, 2001, 2002 Tama Communications Corporation. All
rights reserved.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: global.info,  Node: Plugin,  Next: Compact format,  Prev: Configuration,  Up: Other topics

How to plug in a parser.
========================

   You can write new parser and use as a plugged-in parser.

   Copy `gtags.conf' to `/etc/gtags.conf' or `$HOME/.globalrc'.

   For example, if you would like to use ctags based on etags (included
by Emacs),


         % cd /EMACS SOURCE DIRECTORY/lib-src
         % make ctags
         # cp ctags /usr/local/bin/ctags-emacs
         % setenv GTAGSLABEL ctags-emacs         # see gtags.conf
         % gtags
         % ls G*
         GPATH   GTAGS

   Or if you would like to use exuberant ctags (included by Vim editor),


         % cd /VIM SOURCE DIRECTORY/src/ctags
         % cp Makefile.unix Makefile
         % make
         # cp ctags /usr/local/bin/ctags-exuberant
         % setenv GTAGSLABEL ctags-exuberant     # see gtags.conf
         % gtags
         % ls G*
         GPATH   GTAGS

   `GRTAGS' and `GSYMS' don't exist, simply because these parsers don't
support the `-r' option and `-s' option like gctags(1) does.  All
plugged-in parsers must print tag information to standard output in the
same style as `ctags -x', ie.:


         [1]    [2] [3]          [4]
         ----------------------------------------------------------------
         main    20 ./main.c     main(argc, argv)        /* xxx */
     
         [1] tag name
         [2] line number the tag appeared
         [3] path name. It must be equal to argument path name.
         [4] line image

   Otherwise, you can make a suitable wrapper for the plug-in parser.


File: global.info,  Node: Compact format,  Next: Incremental updating,  Prev: Plugin,  Up: Other topics

Compact format.
===============

   You can save disk space with the compact format. The compact format
needs source files.

   * To specify the use of the compact format on the command line,
     add the `-c' option:

              % gtags -c

   * To specify the use of the compact format in the configuration file:

              +----------------------------
              |...
              |default:\
              |       format=compact:...

   * If you will publish hypertext generated by htags then use the `-c'
     option      of htags too:

              % htags -c

     With the `-c' option, htags makes gzipped hypertext.  You need to
     set up an HTTP server so that gzipped files can be read (see
     `HTML/.htaccess').


              Example:
          
                      Standard        Compact         Compressed rate
              -------------------------------------------------------
              GTAGS    1744896 bytes   720896 bytes   -59%
              GRTAGS  10133504 bytes  1409024 bytes   -86%
              GSYMS   11911168 bytes  9306112 bytes   -22%
          
                      Standard        Compact         Compressed rate
              -------------------------------------------------------
              HTML/   56618 kbytes    15219 kbytes    -73%


File: global.info,  Node: Incremental updating,  Next: Postgres,  Prev: Compact format,  Up: Other topics

Incremental updating.
=====================

   Modifying some source files, you need not remake whole tag files.
Instead, you can use incremental updating facility (`-u' option).

         % gtags
         % cd kern
         % vi tty.c                              # modify tty.c
         ...
         :wq
         % global -vu                            # -v means verbose
         [Sun Dec  6 16:27:47 JST 1998] Gtags started
          Tag found in '/usr/src/sys'.
          Incremental update.
          Updating tags of 'kern/tty.c' ...GTAGS..GRTAGS..GSYMS.. Done.
          Global databases have been modified.
         [Sun Dec  6 16:28:30 JST 1998] Done.
         % global -vu                            # try again
         [Sun Dec  6 16:28:48 JST 1998] Gtags started
          Tag found in '/usr/src/sys'.
          Incremental update.
          Global databases are up to date.       # do nothing
         [Sun Dec  6 16:28:52 JST 1998] Done.


File: global.info,  Node: Postgres,  Prev: Incremental updating,  Up: Other topics

Using Postgres.
===============

   You can make tag files in postgres database instead of normal files.
To do this, you must setup postgres database system, configure GLOBAL
with `--with-postgres', build it and make a database so that you can
access to it. You need a database for a project.  At the first time of
creating tag files, you need specify info string with `--info'. The
info string is passed to PQconnectdb(3) as is.

         # setup postgres database system
         % set DBNAME=gtagsdb
         % createdb $DBNAME
         % gtags -P --info="dbname=$DBNAME user=`whoami`"

   Once tag files are created, you need not use `--info'.  If info
string is not specified then gtags load it from tag files.

   Please be careful of the value of info string.  It is passed to
Postgres system as is.  If you mistake the value then program may abort
with core dump.


File: global.info,  Node: Reference,  Next: GNU Free Documentation License,  Prev: Other topics,  Up: Top

Reference manual
****************

* Menu:

* global::         global - print the locations of specified object.
* gtags::          gtags - create tag files for global.
* htags::          htags - generate hypertext from source code.
* gctags::         gctags - print cross reference list for gtags.
* gozilla::        gozilla - force mozilla to display specified source file.
* btreeop::        btreeop - btree database maintenance tool.


File: global.info,  Node: global,  Next: gtags,  Up: Reference

global - print the locations of specified object.
=================================================

NAME
----

   global - print the locations of specified object.

SYNOPSIS
--------

     global [-ailnqrstTvx] pattern
     global -c[qsv] prefix
     global -f[anqrstvx] files
     global -g[ailnoqtvx] pattern
     global -I[ailnqtvx] pattern
     global -p[qrv]
     global -P[ailnqtvx] pattern
     global -u[qv]

DESCRIPTION
-----------

   Global find the locations of specified object in C, C++, Yacc, Java
and assembler source files.  Global can treat a source tree, that is, a
directory that has subdirectories and source files.  You can get the
relative path of objects from anywhere within the tree.  Global can
locate not only function definitions but also function references and
other symbols.  Duplicate entries are allowed.

   In advance of using this command, you must execute gtags(1) at the
root directory of the source tree to make tag files.  Then you can
execute at anywhere in the source tree.

COMMANDS
--------

   The following commands are available:
pattern
     Print object which match to the pattern.  It can include POSIX
     1003.2 regular expression.

`-c', `--completion' [prefix]
     Print candidate function names which start with specified prefix.
     Prefix is not specified, print all function names.

`-f', `--file' files
     Print all function definitions in the files.  This option implies
     -x option.

`-g', `--grep' pattern
     Print all lines which match to the pattern.  This function use
     grep(1) as a search engine.

`-I', `--idutils' pattern
     Print all lines which match to the pattern.  This function use
     id-utils(1) as a search engine.  To use this command, you need to
     install id-utils(1) in your system and you must execute gtags(1)
     with `-I' option.

`-p', `--print-dbpath'
     Print the location of `GTAGS'.

`-P', `--path' [pattern]
     Print the path which match to the pattern.  If no pattern
     specified, print all.

`-u', `--update'
     Locate tag files and update them incrementally.

`--version'
     Show version number.

`--help'
     Show help.

OPTIONS
-------

   The following options are available:
`-a', `--absolute'
     Print absolute path name. By default, print relative path name.

`-i', `--ignore-case'
     ignore case distinctions in pattern.

`-l', `--local'
     Print just objects which exist under the current directory.

`-n', `--nofilter'
     Suppress sort filter and path conversion filter.

`-o', `--other'
     Search pattern in not only source files but also other files like
     `README'.  This options is valid only with `-g' option.

`-q', `--quiet'
     Quiet mode.

`-r', `--reference', `--rootdir'
     Print the locations of object references.  By default, print
     object definitions.  With the `-p' option, print the root
     directory of source tree.

`-s', `--symbol' pattern
     Print the locations of specified symbol other than function names.
     You need `GSYMS' tags file. See gtags(1).

`-t', `--tags'
     Print with standard ctags format.

`-T', `--through'
     Go through all the tag files listed in GTAGSLIBPATH.  By default,
     stop searching when tag is found.  This option is ignored when
     either `-s', `-r' or `-l' option is specified.

`-v', `--verbose'
     Verbose mode.

`-x', `--cxref'
     In addition to the default output, produce the line number and the
     line contents.

EXAMPLES
--------

     	% ls -F
     	Makefile      src/    lib/
     	% gtags
     	% global main
     	src/main.c
     	% global -x main
     	main              10 src/main.c  main (argc, argv) {
     	% global -x '^[sg]et'
     	set_num           20 lib/util.c  set_num(values)
     	get_num           30 lib/util.c  get_num() {
     	% global -rx '^[sg]et'
     	set_num          113 src/op.c            set_num(32);
     	set_num          225 src/opop.c               if (set_num(0) > 0) {
     	get_num           90 src/op.c            while (get_num() > 0) {
     	% cd lib
     	% global -rx '^[sg]et'
     	set_num          113 ../src/op.c            set_num(32);
     	set_num          225 ../src/opop.c               if (set_num(0) > 0) {
     	get_num           90 ../src/op.c            while (get_num() > 0) {
     	% global strlen
     	% (cd /usr/src/sys; gtags)
     	% setenv GTAGSLIBPATH /usr/src/sys
     	% global strlen
     	../../../usr/src/sys/libkern/strlen.c
     	% (cd /usr/src/lib; gtags)
     	% setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys
     	% global strlen
     	../../../usr/src/lib/libc/string/strlen.c

FILES
-----

`GTAGS'
     Tag file for function definitions.

`GRTAGS'
     Tag file for function references.

`GSYMS'
     Tag file for other symbols.

`GPATH'
     Tag file for path of source files.

`GTAGSROOT'
     If environment variable GTAGSROOT is not set and `GTAGSROOT' exist
     in the same directory with `GTAGS' then use the value as GTAGSROOT.

`/etc/gtags.conf', `$HOME/.globalrc'
     Configuration file.

ENVIRONMENT
-----------

   The following environment variables affect the execution of global:
GTAGSROOT
     The directory which is the root of source tree.

GTAGSDBPATH
     The directory on which gtags database exist.  This value is
     ignored when GTAGSROOT is not defined.

GTAGSLIBPATH
     If this variable is set, it is used as the path to search for
     library functions. If the specified function is not found in a
     source tree, global also search in these paths.

GTAGSLABEL
     If this variable is set, its value is used as the label of
     configuration file. The default is `default'.

CONFIGURATION
-------------

   The following configuration variables affect the execution of global:
`icase_path'(boolean)
     Ignore case distinctions in the pattern.

`sed_command'(string)
     Use specified sed(1) command, which is used internally.

`sort_command'(string)
     Use specified sort(1) command, which is used internally.

DIAGNOSTICS
-----------

   Global exits with a non 0 value if an error occurred, 0 otherwise.

SEE ALSO
--------

   btreeop(1), gctags(1), gtags(1), htags(1).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

AUTHOR
------

   Shigio Yamaguchi

HISTORY
-------

   The global command appeared in FreeBSD 2.2.2.


File: global.info,  Node: gtags,  Next: htags,  Prev: global,  Up: Reference

gtags - create tag files for global.
====================================

NAME
----

   gtags - create tag files for global.

SYNOPSIS
--------

     gtags [-c][-i][-I][-o][-P][-q][-v][-w][dbpath]

DESCRIPTION
-----------

   Gtags makes `GTAGS', `GRTAGS', `GSYMS' and `GPATH' file for
global(1).  Gtags trace subdirectories, read source files, locate
symbols and save the information into tag files in current directory.
You should execute this command at the root of the source tree.  If
your source directory is on a read only device like CDROM, specify
dbpath of the directory on which make tag files.

   C, C++, yacc, java and assembler source files are supported.  Files
whose names end in `.c' or `.h' are assumed to be C source files and
are searched for C style routine and macro definitions.  Files whose
names end in `.c++' `.cc' `.cpp' `.cxx' `.hxx' `.C' `.H' are assumed to
be C++ source files.  Files whose names end in `.y' are assumed to be
YACC source files.  Files whose names end in `.java' are assumed to be
Java source files.  Files whose names end in `.s' or `.S' are assumed
to be Assembler source files.  Other files are searched for C style
definitions.

OPTIONS
-------

   The following options are available:
`-c', `--compact'
     Make tag files with compact format.

`--config' name
     Show the value of config variable name.  If name is not specified
     then show whole of config entry.

`--gtagsconf' file
     Load user's configuration from file.

`-i', `--incremental'
     Update tag files incrementally. You had better use global(1) with
     the -u option.

`-I', `--idutils'
     Make index files for id-utils(1).

`--info' info
     Pass info string to external system.  Currently you can use it
     with -P option.

`-o', `--omit-gsyms'
     Suppress making `GSYMS' file.  Use this option if you don't use -s
     option of global(1).

`-P', `--postgres'
     Use postgres database system instead of db(3).  you can pass info
     string to PQconnectdb(3) using `--info' option.

`-q', `--quiet'
     Quiet mode.

`-v', `--verbose'
     Verbose mode.

`-w', `--warning'
     Print warning messages.

EXAMPLES
--------

     	% ls -F
     	Makefile      src/    lib/
     	% gtags -v
     	% global -x main
     	main              10 src/main.c  main (argc, argv) {

FILES
-----

`GTAGS'
     Tag file for function definitions.

`GRTAGS'
     Tag file for function references.

`GSYMS'
     Tag file for other symbols.

`GPATH'
     Tag file for path of source files.

`/etc/gtags.conf', `$HOME/.globalrc'
     Configuration file.

ENVIRONMENT
-----------

   The following environment variables affect the execution of gtags:
GTAGSCONF
     If this variable is set, its value is used as the configuration
     file. The default is `$HOME/.globalrc'.

GTAGSLABEL
     If this variable is set, its value is used as the label of
     configuration file. The default is `default'.

CONFIGURATION
-------------

   The following configuration variables affect the execution of gtags:
`GTAGS'(string)
     If this variable is set, its value is used as the command line of
     parser for GTAGS. The default is `gctags %s'.

`GRTAGS'(string)
     If this variable is set, its value is used as the command line of
     parser for GRTAGS. The default is `gctags -r %s'.

`GSYMS'(string)
     If this variable is set, its value is used as the command line of
     parser for GSYMS. The default is `gctags -s %s'.

`skip'(comma separated list)
     Gtags skips files which listed in this list.  As a special
     exception, gtags collect values from multiple `skip' variables.
     If the value ends with '/', it assumed as a directory and gtags
     skips all files under it.  If the value start with '/', it assumed
     relative path from the root of source directory.  By default, it
     assumes GPATH, GTAGS, GRTAGS, GSYMS, HTML/, tags, TAGS, ID,
     y.tab.c, y.tab.h, SCCS/, RCS/, CVS/, CVSROOT/, .deps/.

`suffixes'(comma separated list)
     Suffixes of target source file.  As a special exception, gtags
     collect values from multiple `suffixes' variables.  By default, it
     assumes c, h, y, c++, cc, cpp, cxx, hxx, C, H, s, S, java.

`format'(standard|compact)
     Format of tag files. The default is `standard'.  Compact format is
     same to `-c'(`--compact').

`icase_path'(boolean)
     Ignore case distinctions in the path.  Suffixes check are affected
     by this capability.

`sed_command'(string)
     Use specified sed(1) command, which is used internally.

`sort_command'(string)
     Use specified sort(1) command, which is used internally.

DIAGNOSTICS
-----------

   Gtags exits with a non 0 value if an error occurred, 0 otherwise.

SEE ALSO
--------

   btreeop(1), gctags(1), global(1), htags(1).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

BUG
---

   `GTAGS', `GRTAGS' and `GSYMS' are very large.  In advance of using
this command, check the space of your disk.

   Assembler support is far from complete.  It extracts only ENTRY()
and ALTENTRY() from source file.  Probably valid only for FreeBSD and
Linux kernel source.

   There is no concurrency control about tag files.

   Symbols in assembler source files are not extracted for `GSYMS'.

   Please be careful of info string using `--info' option.  Info string
is passed to external system as is.  If you mistake the value then
program may abort with core dump.

AUTHOR
------

   Shigio Yamaguchi

HISTORY
-------

   The gtags command appeared in FreeBSD 2.2.2.


File: global.info,  Node: htags,  Next: gctags,  Prev: gtags,  Up: Reference

htags - generate hypertext from source code.
============================================

NAME
----

   htags - generate hypertext from source code.

SYNOPSIS
--------

     htags [-a][-c][-f][-F][-g][-m][-n][-o][-s][-v][-w][-d dir][-S
     dir][-t title][dir]

DESCRIPTION
-----------

   Htags makes hypertext from C, C++, Yacc and Java source code.

   In advance of using this command, you must execute gtags(1) from the
root directory of the source tree.  Then you can execute htags from the
same place.  Htags makes an `HTML' directory and generates hypertext in
it.

   You can start browsing from `HTML/index.html'.  Once the hypertext
is generated, you can move it anywhere and browse it with any browser.

OPTIONS
-------

   The following options are available:
`-a', `--alphabet'
     Make an alphabetical function index, suitable for a large project.

`--caution'
     Include caution message to prohibit downloading.

`-c', `--compact'
     Compress html files  by gzip(1).  You need to set up an HTTP
     server so that gzip(1) is invoked for each compressed file.  See
     `HTML/.htaccess' that is generated by htags.

`-d', `--dbpath' dir
     Specifies the directory in which `GTAGS' and `GRTAGS' exist. The
     default is the current directory.

`-f', `--form'
     Support search form using CGI program.  You need to set up an HTTP
     server for this.

`-F', `--frame'
     Use frame for each part of the contents.

`-g', `--gtags'
     Execute gtags(1) before creating hypertext.

`--gtagsconf' file
     Load user's configuration from file.

`-m', `--main-func'
     Specify the main function name. The default is `main'.

`-n', `--line-number'
     Print the line numbers. By default, doesn't print it.

`--no-javascript'
     Doesn't put javascript code.  By default, htags put javascript
     code.

`-o', `--other'
     Pick up not only source files but also other files except for
     binary files.

`--style-sheet' file
     Load style sheet file and insert it into <HEAD> tag.

`-s', `--symbols'
     Make anchors not only for functions but also other symbols.
     `GSYMS' tag file needed.

`-S', `--secure-cgi' dir
     write cgi script into dir to realize a centralised cgi script.
     Script alias is `/cgi-bin' by default.  You can overwrite this
     value with config variable `script_alias' in `gtags.conf'.

`-t', `--title' title
     The title of this hypertext. The default is the last component of
     the current directory.

`-v', `--verbose'
     Verbose mode.

`-w', `--warning'
     Print warning messages.

dir
     The directory in which hypertext is generated.  The default is the
     current directory.

EXAMPLES
--------

     	% cd /usr/src/sys
     	# gtags -v
     	# htags -fFnvat 'Welcom to FreeBSD kernel source tour!'
     	% lynx HTML/index.html
     
     	% htags -v --gtags
     	% awk '$1 == "main" {print $2}' HTML/MAP
     	D/348.html
     	% lynx HTML/D/348.html

FILES
-----

`GTAGS'
     Tag file for function definitions.

`GRTAGS'
     Tag file for function references.

`GSYMS'
     Tag file for other symbols.

`GPATH'
     Tag file for path of source files.

`/etc/gtags.conf', `$HOME/.globalrc'
     Configuration file.

ENVIRONMENT
-----------

   The following environment variables affect the execution of htags:
TMPDIR
     If this variable is set, its value is used as the directory to
     make temporary files. The default is `/tmp'.

GTAGSCONF
     If this variable is set, its value is used as the configuration
     file. The default is `$HOME/.globalrc'.

GTAGSLABEL
     If this variable is set, its value is used as the label of
     configuration file. The default is `default'.

CONFIGURATION
-------------

   The following configuration variables affect the execution of htags:
`htags_options'(string)
     Default options for htags. This value is inserted into the head of
     arguments.

`body_begin'(string)
     Begin tag for body. The default is '<BODY>'.

`body_end'(string)
     End tag for body. The default is '</BODY>'.

`title_begin'(string)
     Begin tag for Title. The default is '<FONT COLOR=#cc0000>'.

`title_end'(string)
     End tag for Title. The default is '</FONT>'.

`comment_begin'(string)
     Begin tag for comments. The default is '<I><FONT COLOR=green>'.

`comment_end'(string)
     End tag for comments. The default is '</FONT></I>'.

`sharp_begin'(string)
     Begin tag for 'define'. The default is '<FONT COLOR=darkred>'.

`sharp_end'(string)
     End tag for 'define'. The default is '</FONT>'.

`brace_begin'(string)
     Begin tag for brace. The default is '<FONT COLOR=blue>'.

`brace_end'(string)
     End tag for brace. The default is '</FONT>'.

`reserved_begin'(string)
     Begin tag for reserved word. The default is '<B>'.

`reserved_end'(string)
     End tag for reserved word. The default is '</B>'.

`position_begin'(string)
     Begin tag for posiotion mark. The default is '<FONT COLOR=gray>'.

`position_end'(string)
     End tag for posiotion mark. The default is '</FONT>'.

`ncol'(number)
     Columns of line number. The default is 4.

`tabs'(number)
     Tab stop. The default is 8.

`full_path'(boolean)
     List file names with full path in file index.  By default, list
     just the last component of a path.

`table_list'(boolean)
     List tags using table tag. The default is false.

`normal_suffix'(string)
     Suffix for normal html file. The default is 'html'.

`no_javascript'
     Doesn't put javascript code. By default, htags put javascript code.

`gzipped_suffix'(string)
     Suffix for compressed html file. The default is 'ghtml'.

`script_alias'(string)
     Script alias for safe cgi script (`-S').

`show_position'(boolean)
     Show position per function definition. The default is false.

`symbols'(boolean)
     Make anchors not only for functions but also other symbols.
     `GSYMS' tag file needed.

`definition_header'(no|before|after)
     Position of link header. The default is after.

`other_files'(boolean)
     File index includes not only source files but also other files.
     The default is false.

`enable_grep'(boolean)
     Enable grep search using CGI program. The default is false.

`enable_idutils'(boolean)
     Enable idutils search using CGI program. The default is false.

DIAGNOSTICS
-----------

   Htags exits with a non 0 value if an error occurred, 0 otherwise.

SEE ALSO
--------

   btreeop(1), gctags(1), global(1), gtags(1).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

BUG
---

   Generated hypertext is VERY LARGE.  In advance, check the space of
your disk.

AUTHOR
------

   Shigio Yamaguchi

HISTORY
-------

   The htags command appeared in FreeBSD 2.2.2.


File: global.info,  Node: gctags,  Next: gozilla,  Prev: htags,  Up: Reference

gctags - print cross reference list for gtags.
==============================================

NAME
----

   gctags - print cross reference list for gtags.

SYNOPSIS
--------

     gctags [-bdenrsvw] file ...

DESCRIPTION
-----------

   Gctags print cross reference list for gtags(1) from the specified C,
C++, YACC, JAVA and assembler source to standard output.  Each line of
output contains the object name, the line number which it appears, the
file in which it is defined, and a line image separated by white-space.
It's same with the output of ctags(1) with `-x' option.

   Depending upon the options provided to gctags, objects will consist
of function definitions, function references and other symbols.

   Files whose names end in `.c' or `.h' are assumed to be C source
files and are searched for C style routine and macro definitions.
Files whose names end in `.c++' `.cc' `.cpp' `.cxx' `.hxx' `.C' `.H'
are assumed to be C++ source files.  Files whose names end in `.y' are
assumed to be YACC source files.  Files whose names end in `.java' are
assumed to be Java source files.  Files whose names end in `.s' or `.S'
are assumed to be Assembler source files.  Other files are searched for
C style definitions.

   Yacc files each have a special tag. yyparse is the start of the
second section of the yacc file.

   This command is the default parser of GLOBAL source code tag system.

OPTIONS
-------

   The following options are available:
`-b', `--begin-block'
     Force level 1 block to begin when reach a left brace at the first
     column.  (C only)

`-d', `--define'
     Pick up not only function but also macro without argument as a
     definition.

`-e', `--end-block'
     Force level 1 block to end when reach a right brace at the first
     column.  (C only)

`-n', `--no-tags'
     Suppress output of tags. It is useful to use with `-w' option.

`-r', `--reference'
     Locate function references instead of function definitions.
     `GTAGS' is needed at the current directory.  (C, C++ and Java
     source only) By default, locate function definitions.

`-s', `--symbol'
     Collect symbols other than functions.  By default, locate function
     definitions.

`-v', `--verbose'
     Verbose mode.

`-w', `--warning'
     Print warning message.

`--langmap'=map
     Language mapping. Each comma-separated  map  consists of the
     language name, a colon, and a list of file extensions.  Default
     mapping is
     'c:.c.h,yacc:.y,asm:.s.S,java:.java,cpp:.c++.cc.cpp.cxx.hxx.C.H'.

   The `-r' and `-s' options override each other; the last one
specified determines the method used.

DIAGNOSTICS
-----------

   Gctags exits with a non 0 value if an error occurred, 0 otherwise.
Duplicate objects are not considered errors.

SEE ALSO
--------

   btreeop(1), global(1), gtags(1), htags(1).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

BUG
---

   Gctags relies on the input being well formed, and any syntactical
errors will completely confuse it.

   Assembler support is far from complete.  It extracts only ENTRY()
and ALTENTRY() from source file.  Probably valid only for FreeBSD and
Linux kernel source.

AUTHOR
------

   Shigio Yamaguchi

HISTORY
-------

   The gctags command appeared in FreeBSD 2.2.2.


File: global.info,  Node: gozilla,  Next: btreeop,  Prev: gctags,  Up: Reference

gozilla - force mozilla to display specified source file.
=========================================================

NAME
----

   gozilla - force mozilla to display specified source file.

SYNOPSIS
--------

     gozilla [-b browser][-p][+no] file
     gozilla [-b browser][-p] -d name

DESCRIPTION
-----------

   Gozilla force mozilla to display specified source file as a
hypertext.

   In advance of using this command, [1] you must execute gtags(1) and
htags(1) at the root directory of the source tree to make tag files,
and [2] execute mozilla in you computer.  Then you can execute gozilla
at anywhere in the source tree.

   First form:
You can specify source file and the line number optionally.

   Second form:
You can specify definition name directly. Definition name must exist in
`GTAGS' tag file.

OPTIONS
-------

   The following options are available:
`+no'
     line number. It must be a line on which function definition or
     function reference is exist.  If you execute htags(1) with `-l'
     option, you can specify any line.

`-b' browser
     browser to use. By default, it is assumed mozilla.  If you specify
     another browser, gozilla waits for exiting of the browser.

`-p'
     just print generated target URL.

file
     path of source file or alias name.

`-d' name
     print function.

`-q', `--quiet'
     Quiet mode.

`-v', `--verbose'
     Verbose mode.

`--version'
     Show version number.

`--help'
     Show help.

FILES
-----

`HTML/'
     hypertext of source tree.

`GTAGS/'
     tags file for function definitions.

`$HOME/.gozillarc'
     alias file. Please read source code for the detail.

ENVIRONMENT
-----------

GTAGSROOT
     The directory which is the root of source tree.

GTAGSDBPATH
     The directory on which gtags database exist.  This value is
     ignored when GTAGSROOT is not defined.

BROWSER
     browser to use. By default, it is assumed mozilla.

EXAMPLES
--------

     	% gtags
     	% htags
     	% mozilla &
     	% global -x main
     	main              82 ctags.c          main(argc, argv)
     	% gozilla +82 ctags.c

DIAGNOSTICS
-----------

   Gozilla exits with a non 0 value if an error occurred, 0 otherwise.

SEE ALSO
--------

   global(1), gtags(1), htags(1).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

NOTES
-----

   Gozilla means 'Global for mozilla'.

BUGS
----

   Gozilla can treat not only source file but also normal file,
directory, HTML file and even URL, because it is omnivorous.

   I don't know whether or not gozilla works well in Windows32
environment.

AUTHORS
-------

   Shigio Yamaguchi

HISTORY
-------

   The gozilla command appeared in FreeBSD 2.2.2 but did not installed
by default.


File: global.info,  Node: btreeop,  Prev: gozilla,  Up: Reference

btreeop - btree database maintenance tool.
==========================================

NAME
----

   btreeop - btree database maintenance tool.

SYNOPSIS
--------

     btreeop [-A][-C][-D[n] key][-K[n] key][-L[2]][-k prefix][dbname]

DESCRIPTION
-----------

   Btreeop execute simple operations for btree(3) database.  Btreeop
can create database, write record, read record (sequential or indexed)
and delete record from it.  Duplicate entries are allowed.  Multi-key
is available but only primary key can use index of btree(3).

COMMANDS
--------

   A capital letter means a command. If no command specified then it
assume sequential read operation.  The following commands are available:
none
     Read records sequentially.

`-A'
     Append records. If database doesn't exist, btreeop creates it.

`-C'
     Create database and write records to it.

`-D'[n] key
     Delete records by the key. By default, n is 0 (primary key).

`-K'[n] key
     Search records by the key. By default, n is 0 (primary key).

`-L'[2]
     List all primary keys.  If 2 is specified, list all the key and
     data pairs.

dbname
     Database name. By default, it assume `btree'.

OPTIONS
-------

`-k' prefix
     Scan records which have the prefix as a primary key.  This option
     is valid only with sequential read operation `-L' command or no
     command.

FORMAT
------

     To creat (or append) database, btreeop read data from stdin.
     The format of the data is the following.
     
       Primary-key  Secondary-key-1  Secondary-key-2  Data
       (keyno = 0)  (keyno = 1)      (keyno = 2)
       --------------------------------------------------------------
       main         246              main.c           main () {
       func         120              library.c        func(a1, a2)
       .
       .
       .
     
     o All key and data are separated by blank('\\t' or ' ').
     o Key cannot include blank.
     o Data can include blank.
     o Null data not allowed.
     
     Additionally, META record is available. META record has a key that
     start with a blank. You can read this record only by indexed read
     operation (-K option). Usage is unlimited by btreeop.

EXAMPLES
--------

     Create database.
     
       % btreeop -C
       key1  data1
       key2  data2
       key3  data3
       ^D
       %
     
     Append records.
     
       % btreeop -A
        __.VERSION 2
       key2  data2-2
       ^D
       %
     
     Sequential read.
     
       % btreeop
       key1  data1
       key2  data2-2
       key2  data2
       key3  data3
       %
     
     Indexed read.
     
       % btreeop -K key2
       key2  data2-2
       key2  data2
       % btreeop -K ' __.VERSION'
        __.VERSION 2
       %
     
     List primary keys.
     
       % btreeop -L
       key1
       key2
       key3
       %
     
     Delete record.
     
       % btreeop -D ' __.VERSION'
       % btreeop -K ' __.VERSION'
       %

FILES
-----

`btree'
     default database name.

DIAGNOSTICS
-----------

   Btreeop exits with a non 0 value if an error occurred, 0 otherwise.

SEE ALSO
--------

   btree(3).

   GNU GLOBAL source code tag system
(http://www.gnu.org/software/global/).

AUTHOR
------

   Shigio Yamaguchi

HISTORY
-------

   The btreeop command appeared in FreeBSD 2.2.2.

